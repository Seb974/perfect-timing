{# {{ form_start(form) }}
    {{ form_widget(form) }}
    <button class="btn">{{ button_label|default('Save') }}</button>
{{ form_end(form) }} #}



{% block body %}
    <style>
        #map-example-container
        { height: 300px };
    </style>

    <div class="container mt-3">

        {# {{ form_start(form) }}
            {{ form_widget(form) }}
            <button class="btn">{{ button_label|default('Save') }}</button>
        {{ form_end(form) }} #}

        {{ form_start(form) }}
            <div class="my-custom-class-for-errors">
                {{ form_errors(form) }}
            </div>
            <div id="map-example-container"></div>
            <input type="search" id="input-map" class="form-control" name="algoliaBar" placeholder="Address" required/>
            <div class="col">
                {{ form_row(form.email) }}
            </div>

            <div class="col">
                {{ form_row(form.activity) }}
            </div>
            <div class="col">
                {{ form_row(form.photo) }}
            </div>

            

            <button class="btn">{{ button_label|default('Save') }}</button>
        {{ form_end(form) }}
    </div>
{% endblock %}
 
 {% block js %}
    <script src="https://cdn.jsdelivr.net/leaflet/1/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/places.js@1.17.1"></script>
    <script>
    (function() {
    var placesAutocomplete = places({
        appId: 'pl6124DJ467I',
        apiKey: 'dac682bc8a0dc7a59f7ada449553bcf9',
        container: document.querySelector('#input-map')
    });

    var map = L.map('map-example-container', {
        scrollWheelZoom: false,
        zoomControl: false
    });

    var osmLayer = new L.TileLayer(
        'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        minZoom: 1,
        maxZoom: 13,
        attribution: 'Map data Â© <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
        }
    );

    var markers = [];

    map.setView(new L.LatLng(0, 0), 1);
    map.addLayer(osmLayer);

    placesAutocomplete.on('suggestions', handleOnSuggestions);
    placesAutocomplete.on('cursorchanged', handleOnCursorchanged);
    placesAutocomplete.on('change', handleOnChange);
    placesAutocomplete.on('clear', handleOnClear);

    function handleOnSuggestions(e) {
        markers.forEach(removeMarker);
        markers = [];

        if (e.suggestions.length === 0) {
        map.setView(new L.LatLng(0, 0), 1);
        return;
        }

        e.suggestions.forEach(addMarker);
        findBestZoom();
    }

    function handleOnChange(e) {
        markers
        .forEach(function(marker, markerIndex) {
            if (markerIndex === e.suggestionIndex) {
            markers = [marker];
            marker.setOpacity(1);
            findBestZoom();
            } else {
            removeMarker(marker);
            }
        });
        document.querySelector('.latitude').value = e.suggestion.latlng.lat;
        document.querySelector('.longitude').value = e.suggestion.latlng.lng;
    }

    function handleOnClear() {
        map.setView(new L.LatLng(0, 0), 1);
        markers.forEach(removeMarker);
    }

    function handleOnCursorchanged(e) {
        markers
        .forEach(function(marker, markerIndex) {
            if (markerIndex === e.suggestionIndex) {
            marker.setOpacity(1);
            marker.setZIndexOffset(1000);
            } else {
            marker.setZIndexOffset(0);
            marker.setOpacity(0.5);
            }
        });
    }

    function addMarker(suggestion) {
        var marker = L.marker(suggestion.latlng, {opacity: .4});
        marker.addTo(map);
        markers.push(marker);
    }

    function removeMarker(marker) {
        map.removeLayer(marker);
    }

    function findBestZoom() {
        var featureGroup = L.featureGroup(markers);
        map.fitBounds(featureGroup.getBounds().pad(0.5), {animate: false});
    }
    })();
    </script>
{% endblock %}


