{# {{ form_start(form) }}
    {{ form_widget(form) }}
    <button class="btn">{{ button_label|default('Save') }}</button>
{{ form_end(form) }} #}


{% block body %}
    <style>
        #map-example-container
        { height: 300px };
    </style>

    <div class="container mt-3">
        {{ form_start(form) }}
    <div class="my-custom-class-for-errors">
        {{ form_errors(form) }}
    </div>
    <div class="col">
        {{ form_row(form.username) }}
    </div>
    <div class="col">
        {{ form_row(form.email) }}
    </div>

    <div class="col">
        {{ form_row(form.password) }}
    </div>
    <div class="col">
        {{ form_row(form.roles) }}
    </div>
    <div id="map-example-container"></div>
    <div class="col">
        {{ form_row(form.address) }}
    </div>

    <button class="btn">{{ button_label|default('Save') }}</button>
{{ form_end(form) }}
    </div>
{% endblock %}

{% block js %}
    <script src="https://cdn.jsdelivr.net/leaflet/1/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/places.js@1.16.6"></script>
    <script>
        ( function () {
            var placesAutocomplete = places( {
                appId     : '{{ api.ALGOLIA_APPID  }}',
                apiKey    : '{{ api.ALGOLIA_APIKEY }}',
                container : document.querySelector( '.input-map' ),
            } ).configure( {
                countries         : ['fr'],
                useDeviceLocation : false
            } );

            var map = L.map( 'map-example-container', {
                scrollWheelZoom : true,
                zoomControl     : true
            } );

            var osmLayer = new L.TileLayer( 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                minZoom     : 8,
                maxZoom     : 19,
                attribution : 'Map Â© <a href="https://openstreetmap.org">OpenStreetMap</a>'
            } );

            var markers = [];

            map.setView( new L.LatLng( -21.329519, 55.471617 ), 1 );
            map.addLayer( osmLayer );

            placesAutocomplete.on( 'suggestions'  , handleOnSuggestions   );
            placesAutocomplete.on( 'cursorchanged', handleOnCursorchanged );
            placesAutocomplete.on( 'change'       , handleOnChange        );
            placesAutocomplete.on( 'clear'        , handleOnClear         );

            function handleOnSuggestions( e ) {
                markers.forEach( removeMarker );
                markers = [];
                if ( e.suggestions.length === 0 ) {
                    map.setView( new L.LatLng( 0, 0 ), 1 );
                    return;
                }
                e.suggestions.forEach( addMarker );
                findBestZoom();
            }

            function handleOnChange( e ) {
                markers.forEach( function ( marker, markerIndex ) {
                    if ( markerIndex === e.suggestionIndex ) {
                        markers = [marker];
                        marker.setOpacity( 1 );
                        findBestZoom();
                    } else {
                        removeMarker( marker );
                    }
                } );
                document.querySelector('#gps').value = e.suggestion.latlng.lat + ',' + e.suggestion.latlng.lng;
            }

            function callback(response, status) {
                console.log(response);
            }

            function handleOnClear() {
                map.setView( new L.LatLng( 0, 0 ), 1 );
                markers.forEach( removeMarker );
            }

            function handleOnCursorchanged( e ) {
                markers.forEach( function ( marker, markerIndex ) {
                    if ( markerIndex === e.suggestionIndex ) {
                        marker.setOpacity( 1 );
                        marker.setZIndexOffset( 1000 );
                    } else {
                        marker.setZIndexOffset( 0 );
                        marker.setOpacity( 0.5 );
                    }
                } );
            }

            function addMarker( suggestion ) {
                var marker = L.marker( suggestion.latlng, {
                    opacity: .4
                } );
                marker.addTo( map );
                markers.push( marker );
            }

            function removeMarker( marker ) {
                map.removeLayer( marker );
            }

            function getDistance() {
            }

            function findBestZoom() {
                var featureGroup = L.featureGroup( markers );
                map.fitBounds( featureGroup.getBounds().pad( 0.5 ), {
                    animate: false
                } );
            }
        } )();
    </script>
{% endblock %}